#!/usr/bin/with-contenv bash
#shellcheck shell=bash

APPNAME="cleanup"

echo "[$APPNAME][$(date)] Cleanup started as an s6 service"

# -----------------------------------------------------------------------------------
# Copyright 2020, 2021 Ramon F. Kolb - licensed under the terms and conditions
# of GPLv3. The terms and conditions of this license are included with the Github
# distribution of this package, and are also available here:
# https://github.com/kx1t/docker-planefence
#
# -----------------------------------------------------------------------------------
# Feel free to make changes to the variables between these two lines. However, it is
# STRONGLY RECOMMENDED to RTFM! See README.md for explanation of what these do.
#
# LOOPTIME is the time between two runs cleanup. In our case, daily.
LOOPTIME="1d"
#
# OLDERTHAN indicates which age files can be deleted. This is in DAYS.
# It specifically applies to files in the HTML directory.
# If $PF_DELETEAFTER is set to "0" then we never delete.
# Note - files in /tmp will get deleted if they are older than 2 days.
[[ "x$PF_DELETEAFTER" == "x" ]] && OLDERTHAN=14 || OLDERTHAN=$PF_DELETEAFTER
#
# MAXLOGLINES contains the max number of lines that we will keep in /tmp/planefence.log
MAXLOGLINES=5000

# this function cleans out stuff. Make additions to it as needed.
CLEANUP ()
{
  if (( OLDERTHAN > 0 ))
  then
    echo "[$APPNAME][$(date)] Cleaning up web files older than $OLDERTHAN days"
    echo "[$APPNAME][$(date)] Cleaning up logs and tmp files older than 1 day"
    echo "[$APPNAME][$(date)] Reducing planefence and noise2capt logs to 5000 lines (if needed)"
    find /tmp -mindepth 1 -mtime +2 -delete 2>/dev/null
    find /usr/share/planefence/html/plane*{.html,.js,.csv} -mtime +$OLDERTHAN -delete 2>/dev/null
    find /usr/share/planefence/html/noise*.png -mtime +$OLDERTHAN -delete 2>/dev/null
    find /run/socket30003/*.log -mtime +$OLDERTHAN -delete 2>/dev/null
    find /run/socket30003/*.txt -mtime +$OLDERTHAN -delete 2>/dev/null
    find /usr/share/planefence/persist/*.tmp -mtime +1 -delete 2>/dev/null
    find /usr/share/planefence/persist/*.log -mtime +1 -delete 2>/dev/null
    if [[ -f /tmp/planefence.log ]]
    then
      tail -n $MAXLOGLINES /tmp/planefence.log >/tmp/planefence.log.tmp 2>/dev/null
      mv -f /tmp/planefence.log.tmp /tmp/planefence.log 2>/dev/null
    fi
    if [[ -f /tmp/noise2fence.log ]]
    then
      tail -n $MAXLOGLINES /tmp/noise2fence.log >/tmp/noise2fence.log.tmp 2>/dev/null
      mv -f /tmp/noise2fence.log.tmp /tmp/noise2fence.log 2>/dev/null
    fi
    sed -i '/^$/d' /usr/share/planefence/persist/planefence-ignore.txt 2>/dev/null
  else
    echo "[$APPNAME][$(date)] $LOOPTIME set to 0 - cleanup skipped"

  fi
}
#
#Now loop forevah:
while true
do
  echo "[$APPNAME][$(date)] Performing a cleanup run..."
  CLEANUP
  echo "[$APPNAME][$(date)] Cleanup done. Sleeping for $LOOPTIME"
  sleep $LOOPTIME
done
